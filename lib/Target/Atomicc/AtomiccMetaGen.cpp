//===-- AtomiccMetaGen.cpp - Generating Verilog from LLVM -----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements zzz
//
//===----------------------------------------------------------------------===//
#include "llvm/IR/Instructions.h"

using namespace llvm;

#include "AtomiccDecl.h"

std::map<const Function *, MetaData> funcMetaMap;
static std::string gatherList(MetaData *bm, int listIndex)
{
    std::string temp;
    for (auto titem: bm->list[listIndex])
        for (auto item: titem.second)
            temp += printOperand(item,false) + ":" + titem.first + ";";
    return temp;
}

void metaGenerate(const StructType *STy, FILE *OStr)
{
    ClassMethodTable *table = classCreate[STy];
    std::string name = getStructName(table->STy);
    std::map<std::string, int> exclusiveSeen;

    // write out metadata comments at end of the file
    table->metaList.push_front("//METASTART; " + name);
    int Idx = 0;
    for (auto I = STy->element_begin(), E = STy->element_end(); I != E; ++I, Idx++) {
        const Type *element = *I;
        int64_t vecCount = -1;
        int dimIndex = 0;
        std::string vecDim;
        if (Type *newType = table->replaceType[Idx]) {
            element = newType;
            vecCount = table->replaceCount[Idx];
        }
        do {
        std::string fname = fieldName(STy, Idx);
        if (fname != "") {
            if (vecCount != -1)
                fname += utostr(dimIndex++);
            if (const PointerType *PTy = dyn_cast<PointerType>(element)) {
                if (const StructType *STy = dyn_cast<StructType>(PTy->getElementType()))
                    table->metaList.push_back("//METAEXTERNAL; " + fname + "; " + getStructName(STy) + ";");
            }
            else if (const StructType *STy = dyn_cast<StructType>(element)) {
                std::string sname = getStructName(STy);
                if (sname.substr(0,12) != "l_struct_OC_")
                if (!isInterface(STy))
                    table->metaList.push_back("//METAINTERNAL; " + fname + "; " + sname + ";");
            }
        }
        } while(vecCount-- > 0);
    }
    for (auto FI : table->method) {
        Function *func = FI.second;
        std::string temp = table->guard[func];
        std::string mname = FI.first;
        if (endswith(mname, "__RDY"))
            table->metaList.push_back("//METAGUARD; " + mname.substr(0, mname.length()-5) + "; " + temp + ";");
        else if (endswith(mname, "__READY"))
            table->metaList.push_back("//METAGUARDV; " + mname.substr(0, mname.length()-7) + "; " + temp + ";");
        else {
            // For each method/rule of the current class,
            // gather up metadata generated by processFunction
            MetaData *bm = &funcMetaMap[func];
            std::string temp = gatherList(bm, MetaInvoke);
            if (temp != "")
                table->metaList.push_back("//METAINVOKE; " + mname + "; " + temp);
            std::map<std::string,std::string> metaBefore;
            std::map<std::string,std::string> metaConflict;
            std::map<const Function *, std::string> methodArray;
            for (auto innerFI : table->method)
                methodArray[innerFI.second] = innerFI.first;
            for (auto innerFI : table->method) {
                Function *innerfunc = innerFI.second;
                std::string innermname = methodArray[innerfunc];
                MetaData *innerbm = &funcMetaMap[innerfunc];
                std::string tempConflict;
                if (innerfunc == func)
                    continue;
                // scan all other rule/methods of this class
                for (auto inneritem: innerbm->list[MetaWrite]) {
                    for (auto item: bm->list[MetaRead])
                        // if the current method reads a state element that
                        // is written by another method, add it to the 'before' list
                        if (item.first == inneritem.first) {
                            metaBefore[innermname] = "; :";
                            break;
                        }
                    for (auto item: bm->list[MetaWrite])
                        // if the current method writes a state element that
                        // is written by another method, add it to the 'conflict' list
                        if (item.first == inneritem.first) {
                            metaConflict[innermname] = "; ";
                            break;
                        }
                }
                for (auto inneritem: innerbm->list[MetaInvoke]) {
                    for (auto item: bm->list[MetaInvoke])
                        if (item.first == inneritem.first) {
//printf("[%s:%d] mname %s innermname %s item %s\n", __FUNCTION__, __LINE__, mname.c_str(), innermname.c_str(), item.first.c_str());
                            metaConflict[innermname] = "; ";
                            break;
                        }
                }
            }
            std::string metaStr;
            for (auto item: metaConflict)
                 if (item.second != "" && !exclusiveSeen[item.first])
                     metaStr += item.second + item.first;
            exclusiveSeen[mname] = 1;
            if (metaStr != "")
                table->metaList.push_back("//METAEXCLUSIVE; " + mname + metaStr);
            metaStr = "";
            for (auto item: metaBefore)
                 if (item.second != "")
                     metaStr += item.second + item.first;
            if (metaStr != "")
                table->metaList.push_back("//METABEFORE; " + mname + metaStr);
        }
    }
    std::string ruleNames;
    for (auto item : table->ruleFunctions)
        if (item.second)
            ruleNames += "; " + item.first;
    if (ruleNames != "")
        table->metaList.push_back("//METARULES" + ruleNames);
    for (auto item: table->interfaceConnect) {
        std::string tname = item.target;
        std::string sname = item.source;
printf("[%s:%d] METACONNECT %s %s\n", __FUNCTION__, __LINE__, tname.c_str(), sname.c_str());
        int Idx = 0;
        for (auto I = item.STy->element_begin(), E = item.STy->element_end(); I != E; ++I, Idx++) {
            std::string fname = fieldName(item.STy, Idx);
            if (endswith(fname, "__RDYp")) {
                fname = fname.substr(0, fname.length() - 6);
                for (unsigned i = 0; i < tname.length(); i++)
                    if (tname[i] == '.')
                        tname[i] = '$';
                for (unsigned i = 0; i < sname.length(); i++)
                    if (sname[i] == '.')
                        sname[i] = '$';
                table->metaList.push_back("//METACONNECT; " + tname + MODULE_SEPARATOR + fname + "; " + sname + MODULE_SEPARATOR + fname);
            }
        }
    }
    for (auto item : table->priority)
        table->metaList.push_back("//METAPRIORITY; " + item.first + "; " + item.second);
    for (auto item : table->metaList)
        fprintf(OStr, "%s\n", item.c_str());
}
