//===-- AtomiccMetaGen.cpp - Generating Verilog from LLVM -----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements zzz
//
//===----------------------------------------------------------------------===//
#include "llvm/IR/Instructions.h"

using namespace llvm;

#include "AtomiccDecl.h"

static std::string gatherList(MetaData *bm, int listIndex)
{
    std::string temp;
    for (auto titem: bm->list[listIndex])
        for (auto item: titem.second)
            temp += item + ":" + titem.first + ";";
    return temp;
}

void metaGenerate(ModuleIR *IR, FILE *OStr)
{
    std::map<std::string, int> exclusiveSeen;
    // write out metadata comments at end of the file
    IR->metaList.push_front("//METASTART; " + IR->name);
    for (auto item: IR->fields) {
        int64_t vecCount = item.vecCount;
        int dimIndex = 0;
        if (item.iIR)
        do {
            std::string fldName = item.fldName;
            if (vecCount != -1)
                fldName += utostr(dimIndex++);
            if (item.isPtr)
                IR->metaList.push_back("//METAEXTERNAL; " + fldName + "; " + item.iIR->name + ";");
            else if (item.iIR->name.substr(0,12) != "l_struct_OC_"
                 && item.iIR->name.substr(0,12) != "l_ainterface")
                IR->metaList.push_back("//METAINTERNAL; " + fldName + "; " + item.iIR->name + ";");
        } while(vecCount-- > 0);
    }
    for (auto FI : IR->method) {
        std::string mname = FI.first;
        std::string temp = IR->method[mname]->guard;
        if (endswith(mname, "__RDY"))
            IR->metaList.push_back("//METAGUARD; " + mname.substr(0, mname.length()-5) + "; " + temp + ";");
        else if (endswith(mname, "__READY"))
            IR->metaList.push_back("//METAGUARDV; " + mname.substr(0, mname.length()-7) + "; " + temp + ";");
        else {
            // For each method/rule of the current class,
            // gather up metadata generated by processFunction
            MetaData *bm = &IR->method[mname]->meta;
            std::string temp = gatherList(bm, MetaInvoke);
            if (temp != "")
                IR->metaList.push_back("//METAINVOKE; " + mname + "; " + temp);
            std::map<std::string,std::string> metaBefore;
            std::map<std::string,std::string> metaConflict;
            for (auto innerFI : IR->method) {
                std::string innermname = innerFI.first;
                MetaData *innerbm = &IR->method[innermname]->meta;
                std::string tempConflict;
                if (innermname == mname)
                    continue;
                // scan all other rule/methods of this class
                for (auto inneritem: innerbm->list[MetaWrite]) {
                    for (auto item: bm->list[MetaRead])
                        // if the current method reads a state element that
                        // is written by another method, add it to the 'before' list
                        if (item.first == inneritem.first) {
//printf("[%s:%d] before conflict '%s' innerunc %s mname %s\n", __FUNCTION__, __LINE__, item.first.c_str(), innerFI.first.c_str(), mname.c_str());
                            metaBefore[innermname] = "; :";
                            break;
                        }
                    for (auto item: bm->list[MetaWrite])
                        // if the current method writes a state element that
                        // is written by another method, add it to the 'conflict' list
                        if (item.first == inneritem.first) {
                            metaConflict[innermname] = "; ";
                            break;
                        }
                }
                for (auto inneritem: innerbm->list[MetaInvoke]) {
                    for (auto item: bm->list[MetaInvoke])
                        if (item.first == inneritem.first) {
//printf("[%s:%d] conflict mname %s innermname %s item %s\n", __FUNCTION__, __LINE__, mname.c_str(), innermname.c_str(), item.first.c_str());
                            metaConflict[innermname] = "; ";
                            break;
                        }
                }
            }
            std::string metaStr;
            for (auto item: metaConflict)
                 if (item.second != "" && !exclusiveSeen[item.first])
                     metaStr += item.second + item.first;
            exclusiveSeen[mname] = 1;
            if (metaStr != "")
                IR->metaList.push_back("//METAEXCLUSIVE; " + mname + metaStr);
            metaStr = "";
            for (auto item: metaBefore)
                 if (item.second != "")
                     metaStr += item.second + item.first;
            if (metaStr != "")
                IR->metaList.push_back("//METABEFORE; " + mname + metaStr);
        }
    }
    std::string ruleNames;
    for (auto item : IR->ruleFunctions)
        if (item.second)
            ruleNames += "; " + item.first;
    if (ruleNames != "")
        IR->metaList.push_back("//METARULES" + ruleNames);
    for (auto item: IR->interfaceConnect) {
        std::string tname = item.target;
        std::string sname = item.source;
printf("[%s:%d] METACONNECT %s %s\n", __FUNCTION__, __LINE__, tname.c_str(), sname.c_str());
        for (auto mitem: item.IR->method) {
            IR->metaList.push_back("//METACONNECT; " + tname + MODULE_SEPARATOR + mitem.first + "; " + sname + MODULE_SEPARATOR + mitem.first);
        }
    }
    for (auto item : IR->priority)
        IR->metaList.push_back("//METAPRIORITY; " + item.first + "; " + item.second);
    for (auto item : IR->metaList)
        fprintf(OStr, "%s\n", item.c_str());
}
